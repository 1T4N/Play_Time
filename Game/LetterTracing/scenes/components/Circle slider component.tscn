[gd_scene load_steps=4 format=3 uid="uid://cikkfswae2ji1"]

[ext_resource type="Texture2D" uid="uid://dckgdeihkg34q" path="res://Game/LetterTracing/arts/UI/progress-bar-circle.png" id="1_b80oy"]
[ext_resource type="PackedScene" uid="uid://mn452ka0eaha" path="res://Game/LetterTracing/scenes/components/animationCircleRetryColorComponent.tscn" id="2_eeqxb"]

[sub_resource type="GDScript" id="GDScript_lxpm3"]
script/source = "extends TextureProgressBar
@onready var timer: Timer = $Timer

@export var orderID:int = 0
#@export var customStart:float = 0
@export var halfCircle:bool = true
@export var restart:bool = true
@export var reverse:bool = false
@export var debug:bool = true

@export var startThreshold:float = 0.5
var startPoint:bool = false

var finished:bool = false
var retry:bool = false

const retryTraceDelay = 0.4

func _process(_delta: float) -> void:
	if not debug:
		set_tint_under(Color(0,0,0,0))
	elif debug:
		set_tint_under(Color(0,0,0,0.3))


func _gui_input(event):
	#gui input - takes the posistion of mouse, relative to the origin of node itself
	if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_LEFT and event.pressed:
		#set_value_from_mouse(event.position.y)
		set_value_from_mouse(event.position)
	elif event is InputEventMouseMotion and event.button_mask & MOUSE_BUTTON_MASK_LEFT:
		#set_value_from_mouse(event.position.y)
		set_value_from_mouse(event.position)
	
	if Input.is_action_just_released(\"click\") and not finished:
		print(\"Retry\")
		retry = true

func set_value_from_mouse(mouse_pos):
#region previous code
	##print(\"size x: \", size.x)
	##print(\"mouse x: \", mouse_y)
	##print(\"divided x: \", mouse_y/ size.y)
	#
	##so think of X or Y values only. they are on the cartesian plane. when you divide it, it returns 
	##the ratio on where the progress is? i cant explain it properly. Then clamping is basicaly so it wont
	##overflow the progress bar.
	##we use the size so it can adjust progressively
	#var ratio = clamp(mouse_y / size.y, 0, 1)
	##print(\"ratio: \", clamp(mouse_y / size.y, 0, 1))
	#
	##so now we know where is the mouse located base on the ratio
	##we calculated, we now need to put the value in the progress bar
	##by subtracting the max to min, we can know the exact lenght of the value
	##multiplying the difference to ratio we have, it will produce the exact value on 
	##where its supposed to be
	#value = ratio * (max_value - min_value)
	#timer.start(1)
#endregion
	
	var center = size / 2
	#re align the mouse posistion to reference the center of the area so it points towards the mouse 
	var rel_pos = mouse_pos - center

	# Calculate angle in degrees (-180 to 180)
	# get the exact value of radian on where its pointing
	var angle_rad = atan2(rel_pos.y, rel_pos.x)
	# convert to degrees
	var angle_deg = rad_to_deg(angle_rad)

	# Adjust for initial angle and normalize to 0-360
	# I added 90 because the progress starts at the very top in which the 
	# angle or radians starts from right so i just offsetted it
	angle_deg = fmod(angle_deg - get_radial_initial_angle() + 360 + 90, 360)
	#print(angle_deg)
	# Convert angle to progress value
	var fill_ratio = angle_deg / radial_fill_degrees
	fill_ratio = clamp(fill_ratio, 0, 1)	
	
	#this mirrors/reverse the direction where the progress should start
	if reverse:
		set_fill_mode(FILL_COUNTER_CLOCKWISE)
		fill_ratio = 1.0 - fill_ratio
	else:
		set_fill_mode(FILL_CLOCKWISE)
	
	
	print(fill_ratio)
	if Input.is_action_just_pressed(\"click\") and fill_ratio < startThreshold:
		if halfCircle:
			if fill_ratio < (startThreshold / 2):
				startPoint = true
			else:
				startPoint = false
		else:
			startPoint = true
		
	else:
		if Input.is_action_just_pressed(\"click\"):
			startPoint = false
		if not Input.is_action_pressed(\"click\"):
			startPoint = false
			return
	
	if not startPoint:
		return
	
	
	if not halfCircle:		
		value = min_value + fill_ratio * (max_value - min_value)
	else:
		if not reverse and angle_deg <= 180:
			value = min_value + fill_ratio * (max_value - min_value)
		elif reverse and angle_deg >= 180:
			value = min_value + fill_ratio * (max_value - min_value)
		
	
	if restart:
		timer.start(retryTraceDelay)




func _on_timer_timeout() -> void:
	#returns back the progress to start
	var tween = create_tween()
	tween.tween_property(self,\"value\",0,0.3).set_trans(Tween.TRANS_SPRING)


func _on_value_changed(value: float) -> void:
	#stays the progress in the 100 if completed
	if halfCircle == true and value == max_value/2 :
		value = max_value/2
		finished = true
		#self.set_process_mode(PROCESS_MODE_DISABLED)
	elif value == max_value and halfCircle == false:
		finished = true
		#self.set_process_mode(PROCESS_MODE_DISABLED)
"

[node name="CircleSliderComponent" type="TextureProgressBar"]
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -112.5
offset_top = -117.5
offset_right = 112.5
offset_bottom = 117.5
grow_horizontal = 2
grow_vertical = 2
value = 2.0
fill_mode = 4
nine_patch_stretch = true
texture_under = ExtResource("1_b80oy")
texture_progress = ExtResource("1_b80oy")
tint_under = Color(0, 0, 0, 0.317647)
script = SubResource("GDScript_lxpm3")
reverse = true

[node name="Timer" type="Timer" parent="."]

[node name="AnimationRetryColor" parent="." instance=ExtResource("2_eeqxb")]

[connection signal="value_changed" from="." to="." method="_on_value_changed"]
[connection signal="timeout" from="Timer" to="." method="_on_timer_timeout"]
